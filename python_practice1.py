# -*- coding: utf-8 -*-
"""python_practice1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1O1xROCZBs6uNF3pGuwq9VatkY3czVvxj
"""



arr1[:,::2]

#function arguement unpacking
def myfunction(a,b,c):
 print(a,b,c)
tuple_values=(10,20,30)
dict_values={'a':40,'b':50,'c':60}
print(myfunction(*tuple_values))
print(myfunction(**dict_values))

a=["hello"]
for i in range(10):
  a.append(i*++i)
  for a[i] in a:
    print(a[i])

#convert list to string
weekdays = ['sun','mon','tue','wed','thu','fri','sat']
listAsString = ' '.join(weekdays)
print(listAsString)

#list to tuple
list1=['hello','list','how','are','you']
converttotuple=tuple(list1)
print(converttotuple)

#list to set
weekdays = ['sun','mon','tue','wed','thu','fri','sat','sun','tue']
listAsSet = set(weekdays)
print(listAsSet)

#count the occurence od an element in the list
#EXAMPLE1

list3=['hi','hi','list','oops','said','two','time','hi']
print(list3.count('hi'))

#EXAMPLE2
print([[x,list3.count(x)] for x in set(list3)])

#NUMPY
"""A numpy arrays are more flexible than list in python . By using numpy arrays reading and  writing items faster and its more efficient"""
#creating one empty numpy arrys, and we can create it by two ways.
import numpy as np
np.array([])

#2nd way
np.empty(shape=(0,0))

#negative indexing
import array
array1=[1,2,3,4,5,9,8,7,6,5]
#reverse the array
print(array1[::-1])
print(array1[-3])
print(array1[-2])
print(array1[-1])

names = ['Chris', 'Jack', 'John', 'Daman']
print(names[-4][-5])

#Enumerate() adds counter to the iterable objects
subjects = ('Python', 'Interview', 'Questions')
for i, subject in enumerate(subjects):
 print(i, subject)

"""SET
the python data type set is a kind of collection .a set contains unordered collection of unique and immutable objects."""

#create set
objects={"python","coding","karna","hai"}
print(objects)
print(len(objects))

# use of in keywords
if "coding" in objects:
  print("hello in keyword in set")

#use of not in 

if "python" not in objects:
  print("python is the best programming language")

#initilaize an empty set
items=set()
#add 3 strings
items.add("coding")
items.add("karna")
items.add("hai")

print(items)

#concatanate in python using +
print('python' + 'is' + 'best')

#print the sum of the numbers starting from 1 to 1000
print(sum(range(1,1001)))
#In Python the range function does not include the end given. Here it will exclude 1001.

"""how to set global variable inside  a function
we can use a global variable in other functions by declaring it as global in each function that assigns to it"""
globvar = 0
def set_globvar_to_one():
 global globvar # Needed to modify global copy of globvar
globvar = 1
def print_globvar():
 print (globvar) # No need for global declaration to read value of globvar
set_globvar_to_one()
print_globvar() # Prints 1

list("hello")

#a program to find the average of numbers in a list in Python
n=int(input("Enter the number of elements to be inserted: "))
a=[]
for i in range(0,n):
 element=int(input("Enter element: "))
a.append(element)
avg=sum(a)/n
print("Average of elements in the list",round(avg,2))

#program to reverse a  number
n=int(input("Enter number: "))
rev=0
while(n>0):
 dig=n%10
rev=rev*10+dig
n=n//10
print("The reverse of the number:",rev)

#Find Sum of the Digits of a Number
n=int(input("Enter a number:"))
tot=0
while(n>0):
 dig=n%10
tot=tot+dig
n=n//10
print("The total sum of digits is:",tot)

str="Hello python"
print(type(str))

str1= "I am learning python String"
print(str1[0:])
print(str1[1:5])
print(str1[13:20])
print(str1[-14:-1])
#str1[0]="U"
# using triple quotes  
print('''''They said, "What's there?"''')  
  
# escaping single quotes  
print('They said, "What\'s going on?"')  
  
# escaping double quotes  
print("They said, \"What's going on?\"")

#OOP
#_____________________________________

class Dog:

	# class attribute
	attr1 = "mammal"

	# Instance attribute
	def __init__(self, name):
		self.name = name

# Driver code
# Object instantiation
Rodger = Dog("Rodger")
Tommy = Dog("Tommy")

# Accessing class attributes
print("Rodger is a {}".format(Rodger.__class__.attr1))
print("Tommy is also a {}".format(Tommy.__class__.attr1))

# Accessing instance attributes
print("My name is {}".format(Rodger.name))
print("My name is {}".format(Tommy.name))

class car:  
    def __init__(self,modelname, year):  
        self.modelname = modelname  
        self.year = year  
    def display(self):  
        print(self.modelname,self.year)  
  
c1 = car("Toyota", 2016)
c2 = car("mercedes",2010)  
c1.display() 
c2.display()

dict={"kela":"banana","aam":"mango"}
user=input("enter keyword to search::::")
try:
  print(dict[user])
except:
  print("sorry!!!!!!")

fruit=['apple','pear','orange','grateful','strawberry']
a=fruit.index('orange')
b=fruit.index('pear')
print(a)
print(b)

fruit = ['pear', 'orange', 'apple']
print( fruit )     
print( id(fruit) ) 
fruit.clear()
print( fruit )     
print( id(fruit) )
print('---------------------------------')
#we can do this with del
del fruit[:]
print(fruit)

grocery_list=['flour','cheese','carrots']
for idx,val in enumerate (grocery_list):
  print("%s: %s" % (idx,val))

#concatanate 2 lists
one=[1,2,3,4,5,6]
two=['hello','list','how','are','you']
one+two

#return a new list with 1 added to every element.
li=[10,11,12,13,14,15]
[i+1 for i in li]

#count the specific occurence of an object into the list
li1=['hi','hello','list','hi']
li1.count('hi')

round1=['alex','shiba','tuba','maya','emely']
round2=round1.copy()
print(round1)
print(round2)
len(round1)
round3=[[2,3,5,],[4,5,6]]
len(round3)
'shiba' not in round1

#Multiply every element in a list by 5 with the map function
def multiply_5(val):
    return val * 5
a = [10,20,30,40,50]
[val for val in map(multiply_5, a)]

#Combine 2 lists into a list of tuples with the zip function
list1=['hello','list1','how','are','you']
list2=['hi','list2','i','am','fine']

list(zip(list1,list2))

#Insert a value at a specific index in an existing list
list1=['hello','list1','how','are','you']
list1.insert(2,'new')
list1

#Subtract values in a list from the first element with the reduce function
from functools import reduce
def subtract(a,b):
 return a-b
numbers=[100,200,300,400,500]
reduce(subtract,numbers)

#Remove negative values from a list with the filter function
def remove_negatives(x):
  return True if x>=0 else False
a=[100,-3,400,-67]
[x for x in filter(remove_negatives,a)]

#Convert a list into a dictionary where list elements are keys
li = ['The', 'quick', 'brown', 'fox', 'was', 'quick']
d = {k:1 for k in li}

#multiply 5 with the existing list using lambda function

a=[10,20,30,40,50,60]
list(map(lambda val:val*5,a))

#sort a list of integer in ascending and descending order
li=[78,89,90,45,34,45,23,12,93,87]
li.sort()
li

li=[78,89,90,45,34,45,23,12,93,87]
li.sort(reverse=True)
li

#Filter even values out of a list with list comprehension

list=[34,67,89,54,32]
print(list[::-1])

#printeven numbers from the given list
list=[34,67,89,54,32]
for i in list:
  #print(i/2)

  if (i%2)==0:
    print(i)

#print odd using list comprehension
list=[34,67,89,54,32]
[i for i in list if i%2 != 0]

#Count occurrences of each value in a list
from collections import Counter
colors=['red','pink','blue','red','black','blue','gray']
Counter(colors)

#Get the first element from each nested list in a list
li=[[1,2,3],[4,5,6],[7,8,9],[9,8,7],[6,5,4],[4,3,2]]
[i[0] for i in li]

#Combine elements in a list into a single string.
list=['hello','list','how','are','you','doing']
' '.join(list)

#What’s the affect of multiplying a list by an integer?
['hello','hi','greetings']*5

# Use the “all” function to return True if all values in a list are negative
li1=[1,2,3,4,5]
li2=[6,7,8,9,1]
all(i%2==0 for i in li1)
all(i%2==0 for i in li2)

#reverse the order of a list
li=[1,2,3,4,5,6,7,8,9]
li.reverse()
li

li = [10,1,9,2,8,3,7,4,6,5]
li.sort()
li #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
li = [10,1,9,2,8,3,7,4,6,5]
sorted(li) #=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#use liast as stack
stack=[]
stack.append('hello')
stack.append('hi')
stack.append('how')
stack.append('are')
stack.append('you')
print(stack)
print(stack.pop())

#intersection of 2 lists
li1=[1,2,3]
li2=[4,5,6]
set(li) & set(li)

#find the difference between 2 sets
li1=[1,2,3,4,5]
li2=[4,5,6,7,8]
set(li1)-set(li2)
set(li2)-set(li1)

#flatten a list of list with list comprehension
li = [[1,2,3],[4,5,6]]
[i for x in li for i in x]

# combine 2 list into a dictionary
student=['alex','mini','emely','harry']
address=['usa','germany','egypt','india']
dict(zip(student,address))

#reverse the order of a string using slice syntax
li=['98','hello','revrsing','67.0','56']
li[::-1]

